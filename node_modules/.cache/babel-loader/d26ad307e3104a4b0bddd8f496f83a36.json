{"ast":null,"code":"import _toConsumableArray from \"/Users/macbook/react-message-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _objectSpread from \"/Users/macbook/react-message-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nvar _jsxFileName = \"/Users/macbook/react-message-app/src/components/ConversationList/TabAllContent.js\";\nimport React, { Fragment, useEffect } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { fetchConversations, fetchPostFanpage, setCurrentConversation, setCurrentPost, setCurrentType } from \"../../redux/actions/profiles\";\nimport { getTwilioChannel } from \"../../redux/actions/twilio\";\nimport LoadingSpinner from \"../App/LoadingSpinner\";\nimport ConversationListItem from \"../ConversationListItem\";\nexport default function TabAllContent(props) {\n  //   const conversations = useSelector((state) => state.conversations);\n  var dispatch = useDispatch();\n  var conversations = useSelector(function (state) {\n    return state.profile.conversations;\n  });\n  var posts = useSelector(function (state) {\n    return state.profile.posts;\n  });\n  var currentTab = useSelector(function (state) {\n    return state.profile.currentTab;\n  });\n  var twilioUser = useSelector(function (state) {\n    return state.twilio.twilioUser;\n  });\n  var loadingPost = useSelector(function (state) {\n    return state.profile.loadingPost;\n  }); //   const conversations = [{ name: \"text\" }];\n\n  var getConversations = function getConversations() {\n    // console.log(\"in function getconversations\");\n    dispatch(fetchConversations()); // setConversations([...conversations, ...newConversations]);\n  };\n\n  var getPostFanpage = function getPostFanpage() {\n    console.log(\"in function getPostFanpage\");\n    dispatch(fetchPostFanpage()); // setConversations([...conversations, ...newConversations]);\n  };\n\n  useEffect(function () {\n    dispatch(setCurrentConversation({\n      id: null,\n      displayName: null,\n      haveResponsePerson: false\n    }));\n    dispatch(setCurrentPost(null));\n    dispatch(setCurrentType(null));\n    getConversations();\n    getPostFanpage();\n  }, []);\n\n  var _handleClickListItem = function handleClickListItem(item) {\n    // console.log(channelName, id);\n    var _item = _objectSpread({}, item),\n        id = _item.id,\n        displayName = _item.displayName,\n        haveResponsePerson = _item.haveResponsePerson,\n        channelName = _item.channelName;\n\n    dispatch(setCurrentType(item.type));\n\n    if (item.type === \"conversation\") {\n      dispatch(setCurrentConversation({\n        id: id,\n        displayName: displayName,\n        haveResponsePerson: haveResponsePerson\n      }));\n      dispatch(getTwilioChannel(twilioUser, channelName));\n    } else {\n      dispatch(setCurrentPost(item));\n    }\n  };\n\n  var allContents = [].concat(_toConsumableArray(conversations && conversations.map(function (item) {\n    return _objectSpread({\n      type: \"conversation\"\n    }, item);\n  })), _toConsumableArray(posts && posts.map(function (item) {\n    return _objectSpread({\n      type: \"post\"\n    }, item);\n  })));\n  console.log(allContents);\n  return React.createElement(Fragment, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68\n    },\n    __self: this\n  }, !loadingPost ? allContents && allContents.map(function (item) {\n    return React.createElement(ConversationListItem, Object.assign({\n      handleClickListItem: function handleClickListItem() {\n        return _handleClickListItem(item);\n      }\n    }, item, {\n      photo: \"logo_user.jpg\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73\n      },\n      __self: this\n    }));\n  }) : React.createElement(LoadingSpinner, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80\n    },\n    __self: this\n  }));\n}","map":{"version":3,"sources":["/Users/macbook/react-message-app/src/components/ConversationList/TabAllContent.js"],"names":["React","Fragment","useEffect","useDispatch","useSelector","fetchConversations","fetchPostFanpage","setCurrentConversation","setCurrentPost","setCurrentType","getTwilioChannel","LoadingSpinner","ConversationListItem","TabAllContent","props","dispatch","conversations","state","profile","posts","currentTab","twilioUser","twilio","loadingPost","getConversations","getPostFanpage","console","log","id","displayName","haveResponsePerson","handleClickListItem","item","channelName","type","allContents","map"],"mappings":"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","sourcesContent":["import React, { Fragment, useEffect } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport {\r\n  fetchConversations,\r\n  fetchPostFanpage,\r\n  setCurrentConversation,\r\n  setCurrentPost,\r\n  setCurrentType,\r\n} from \"../../redux/actions/profiles\";\r\nimport { getTwilioChannel } from \"../../redux/actions/twilio\";\r\nimport LoadingSpinner from \"../App/LoadingSpinner\";\r\nimport ConversationListItem from \"../ConversationListItem\";\r\nexport default function TabAllContent(props) {\r\n  //   const conversations = useSelector((state) => state.conversations);\r\n  const dispatch = useDispatch();\r\n  const conversations = useSelector((state) => state.profile.conversations);\r\n  const posts = useSelector((state) => state.profile.posts);\r\n  const currentTab = useSelector((state) => state.profile.currentTab);\r\n  const twilioUser = useSelector((state) => state.twilio.twilioUser);\r\n  const loadingPost = useSelector((state) => state.profile.loadingPost);\r\n  //   const conversations = [{ name: \"text\" }];\r\n\r\n  const getConversations = () => {\r\n    // console.log(\"in function getconversations\");\r\n    dispatch(fetchConversations());\r\n    // setConversations([...conversations, ...newConversations]);\r\n  };\r\n  const getPostFanpage = () => {\r\n    console.log(\"in function getPostFanpage\");\r\n    dispatch(fetchPostFanpage());\r\n    // setConversations([...conversations, ...newConversations]);\r\n  };\r\n  useEffect(() => {\r\n    dispatch(\r\n      setCurrentConversation({\r\n        id: null,\r\n        displayName: null,\r\n        haveResponsePerson: false,\r\n      })\r\n    );\r\n    dispatch(setCurrentPost(null));\r\n    dispatch(setCurrentType(null));\r\n\r\n    getConversations();\r\n    getPostFanpage();\r\n  }, []);\r\n\r\n  const handleClickListItem = (item) => {\r\n    // console.log(channelName, id);\r\n    const { id, displayName, haveResponsePerson, channelName } = { ...item };\r\n    dispatch(setCurrentType(item.type));\r\n    if (item.type === \"conversation\") {\r\n      dispatch(setCurrentConversation({ id, displayName, haveResponsePerson }));\r\n      dispatch(getTwilioChannel(twilioUser, channelName));\r\n    } else {\r\n      dispatch(setCurrentPost(item));\r\n    }\r\n  };\r\n\r\n  const allContents = [\r\n    ...(conversations &&\r\n      conversations.map((item) => ({ type: \"conversation\", ...item }))),\r\n    ...(posts && posts.map((item) => ({ type: \"post\", ...item }))),\r\n  ];\r\n\r\n  console.log(allContents);\r\n  return (\r\n    <Fragment>\r\n      {/* <ConversationSearch /> */}\r\n      {!loadingPost ? (\r\n        allContents &&\r\n        allContents.map((item) => (\r\n          <ConversationListItem\r\n            handleClickListItem={() => handleClickListItem(item)}\r\n            {...item}\r\n            photo={`logo_user.jpg`}\r\n          />\r\n        ))\r\n      ) : (\r\n        <LoadingSpinner />\r\n      )}\r\n    </Fragment>\r\n  );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}