{"ast":null,"code":"\"use strict\";\n\nvar _slicedToArray = require(\"/Users/macbook/react-message-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/slicedToArray\");\n\nvar _classCallCheck = require(\"/Users/macbook/react-message-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/macbook/react-message-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar tree_1 = require(\"./utils/tree\");\n\nvar Entry =\n/*#__PURE__*/\nfunction () {\n  function Entry(value, revision) {\n    _classCallCheck(this, Entry);\n\n    this.value = value;\n    this.revision = revision || 0;\n  }\n\n  _createClass(Entry, [{\n    key: \"isValid\",\n    get: function get() {\n      return true;\n    }\n  }]);\n\n  return Entry;\n}();\n\nvar Tombstone =\n/*#__PURE__*/\nfunction () {\n  function Tombstone(revision) {\n    _classCallCheck(this, Tombstone);\n\n    this.revision = revision;\n  }\n\n  _createClass(Tombstone, [{\n    key: \"isValid\",\n    get: function get() {\n      return false;\n    }\n  }]);\n\n  return Tombstone;\n}();\n\nvar Cache =\n/*#__PURE__*/\nfunction () {\n  function Cache() {\n    _classCallCheck(this, Cache);\n\n    this.items = new tree_1.TreeMap();\n  }\n\n  _createClass(Cache, [{\n    key: \"store\",\n    value: function store(key, value, revision) {\n      var entry = this.items.get(key);\n\n      if (entry && entry.revision > revision) {\n        if (entry.isValid) {\n          return entry.value;\n        }\n\n        return null;\n      }\n\n      this.items.set(key, new Entry(value, revision));\n      return value;\n    }\n  }, {\n    key: \"delete\",\n    value: function _delete(key, revision) {\n      var force = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n      var curr = this.items.get(key);\n\n      if (!curr || curr.revision < revision || curr && force === true\n      /* forced delete when revision is unknown */\n      ) {\n          this.items.set(key, new Tombstone(revision));\n        }\n    }\n  }, {\n    key: \"isKnown\",\n    value: function isKnown(key, revision) {\n      var curr = this.items.get(key);\n      return curr && curr.revision >= revision;\n    }\n  }, {\n    key: \"get\",\n    value: function get(key) {\n      var entry = this.items.get(key);\n\n      if (entry && entry.isValid) {\n        return entry.value;\n      }\n\n      return null;\n    }\n  }, {\n    key: \"has\",\n    value: function has(key) {\n      var entry = this.items.get(key);\n      return entry && entry.isValid;\n    }\n  }, {\n    key: \"forEach\",\n    value: function forEach(callbackfn) {\n      if (this.items) {\n        var _iteratorNormalCompletion = true;\n        var _didIteratorError = false;\n        var _iteratorError = undefined;\n\n        try {\n          for (var _iterator = this.items[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n            var _step$value = _slicedToArray(_step.value, 2),\n                key = _step$value[0],\n                entry = _step$value[1];\n\n            if (entry.isValid) {\n              callbackfn(key, entry.value);\n            }\n          }\n        } catch (err) {\n          _didIteratorError = true;\n          _iteratorError = err;\n        } finally {\n          try {\n            if (!_iteratorNormalCompletion && _iterator.return != null) {\n              _iterator.return();\n            }\n          } finally {\n            if (_didIteratorError) {\n              throw _iteratorError;\n            }\n          }\n        }\n      }\n    }\n  }]);\n\n  return Cache;\n}();\n\nexports.Cache = Cache;\nexports.default = Cache;","map":null,"metadata":{},"sourceType":"script"}