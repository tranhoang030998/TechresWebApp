{"ast":null,"code":"\"use strict\";\n\nvar _classCallCheck = require(\"/Users/macbook/react-message-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/macbook/react-message-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar SyncEntity =\n/*#__PURE__*/\nfunction () {\n  function SyncEntity(services, removalHandler) {\n    _classCallCheck(this, SyncEntity);\n\n    this.services = services;\n    this.removalHandler = removalHandler;\n    this.subscriptionState = 'none';\n    this._attachedListeners = new Map();\n  }\n\n  _createClass(SyncEntity, [{\n    key: \"_advanceLastEventId\",\n    value: function _advanceLastEventId(eventId, revision) {}\n  }, {\n    key: \"reportFailure\",\n    value: function reportFailure(err) {\n      if (err.status === 404) {\n        // assume that 404 means that entity has been removed while we were away\n        this.onRemoved(false);\n      } else {\n        this.broadcastEventToListeners('failure', err);\n      }\n    }\n    /**\n     * Subscribe to changes of data entity\n     * @private\n     */\n\n  }, {\n    key: \"_subscribe\",\n    value: function _subscribe() {\n      this.services.router.subscribe(this.sid, this);\n    }\n    /**\n     * Unsubscribe from changes of current data entity\n     * @private\n     */\n\n  }, {\n    key: \"_unsubscribe\",\n    value: function _unsubscribe() {\n      this.services.router.unsubscribe(this.sid);\n    }\n  }, {\n    key: \"_setSubscriptionState\",\n    value: function _setSubscriptionState(newState) {\n      this.subscriptionState = newState;\n      this.broadcastEventToListeners('_subscriptionStateChanged', newState);\n    }\n    /**\n     * @public\n     */\n\n  }, {\n    key: \"close\",\n    value: function close() {\n      this._unsubscribe();\n\n      if (this.removalHandler != null) {\n        this.removalHandler(this.type, this.sid, this.uniqueName);\n      }\n    }\n  }, {\n    key: \"attach\",\n    value: function attach(closeable) {\n      var uuid = closeable.listenerUuid;\n\n      var existingRecord = this._attachedListeners.get(uuid);\n\n      if (existingRecord) {\n        return;\n      }\n\n      if (!this._attachedListeners.size) {\n        // the first one to arrive\n        this._subscribe();\n      }\n\n      this._attachedListeners.set(uuid, closeable);\n    }\n  }, {\n    key: \"detach\",\n    value: function detach(listenerUuid) {\n      this._attachedListeners.delete(listenerUuid);\n\n      if (!this._attachedListeners.size) {\n        // last one out, turn off lights, shut the door\n        this.close(); // invokes unsubscribe and removal handler\n      }\n    }\n  }, {\n    key: \"broadcastEventToListeners\",\n    value: function broadcastEventToListeners(eventName, args) {\n      var _iteratorNormalCompletion = true;\n      var _didIteratorError = false;\n      var _iteratorError = undefined;\n\n      try {\n        for (var _iterator = this._attachedListeners.values()[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n          var listener = _step.value;\n          listener.emit(eventName, args);\n        }\n      } catch (err) {\n        _didIteratorError = true;\n        _iteratorError = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion && _iterator.return != null) {\n            _iterator.return();\n          }\n        } finally {\n          if (_didIteratorError) {\n            throw _iteratorError;\n          }\n        }\n      }\n    }\n  }]);\n\n  return SyncEntity;\n}();\n\nexports.SyncEntity = SyncEntity;\nexports.default = SyncEntity;","map":null,"metadata":{},"sourceType":"script"}