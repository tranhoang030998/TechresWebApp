{"ast":null,"code":"var _jsxFileName = \"/Users/macbook/react-message-app/src/components/ConversationList/TabMessageContent.js\";\nimport React, { Fragment, useEffect } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { fetchConversations, setCurrentConversation, setCurrentPost, setCurrentType } from \"../../redux/actions/profiles\";\nimport { getTwilioChannel } from \"../../redux/actions/twilio\";\nimport LoadingSpinner from \"../App/LoadingSpinner\";\nimport ConversationListItem from \"../ConversationListItem\";\nexport default function TabMessageContent(props) {\n  //   const conversations = useSelector((state) => state.conversations);\n  var dispatch = useDispatch();\n  var conversations = useSelector(function (state) {\n    return state.profile.conversations;\n  });\n  var currentTab = useSelector(function (state) {\n    return state.profile.currentTab;\n  });\n  var twilioUser = useSelector(function (state) {\n    return state.twilio.twilioUser;\n  });\n  var loadingUser = useSelector(function (state) {\n    return state.twilio.loadingUser;\n  }); //   const conversations = [{ name: \"text\" }];\n\n  var getConversations = function getConversations() {\n    // console.log(\"in function getconversations\");\n    dispatch(fetchConversations()); // setConversations([...conversations, ...newConversations]);\n  };\n\n  useEffect(function () {\n    dispatch(setCurrentConversation({\n      id: null,\n      displayName: null,\n      haveResponsePerson: false\n    }));\n    dispatch(setCurrentPost(null));\n    dispatch(setCurrentType(null));\n    getConversations();\n  }, [currentTab]);\n\n  var _handleClickListItem = function handleClickListItem(channelName, id, displayName, haveResponsePerson) {\n    // console.log(channelName, id);\n    dispatch(setCurrentConversation({\n      id: id,\n      displayName: displayName,\n      haveResponsePerson: haveResponsePerson\n    }));\n    dispatch(getTwilioChannel(twilioUser, channelName));\n  };\n\n  return React.createElement(Fragment, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54\n    },\n    __self: this\n  }, !loadingUser ? conversations && conversations.map(function (conversation) {\n    return React.createElement(ConversationListItem, Object.assign({\n      handleClickListItem: function handleClickListItem() {\n        return _handleClickListItem(conversation.channelName, conversation.id, conversation.displayName, conversation.haveResponsePerson);\n      }\n    }, conversation, {\n      photo: \"logo_user.jpg\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 59\n      },\n      __self: this\n    }));\n  }) : React.createElement(LoadingSpinner, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73\n    },\n    __self: this\n  }));\n}","map":{"version":3,"sources":["/Users/macbook/react-message-app/src/components/ConversationList/TabMessageContent.js"],"names":["React","Fragment","useEffect","useDispatch","useSelector","fetchConversations","setCurrentConversation","setCurrentPost","setCurrentType","getTwilioChannel","LoadingSpinner","ConversationListItem","TabMessageContent","props","dispatch","conversations","state","profile","currentTab","twilioUser","twilio","loadingUser","getConversations","id","displayName","haveResponsePerson","handleClickListItem","channelName","map","conversation"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC;AACA,SACEC,kBADF,EAEEC,sBAFF,EAGEC,cAHF,EAIEC,cAJF,QAKO,8BALP;AAMA,SAASC,gBAAT,QAAiC,4BAAjC;AACA,OAAOC,cAAP,MAA2B,uBAA3B;AACA,OAAOC,oBAAP,MAAiC,yBAAjC;AAEA,eAAe,SAASC,iBAAT,CAA2BC,KAA3B,EAAkC;AAC/C;AACA,MAAMC,QAAQ,GAAGX,WAAW,EAA5B;AACA,MAAMY,aAAa,GAAGX,WAAW,CAAC,UAACY,KAAD;AAAA,WAAWA,KAAK,CAACC,OAAN,CAAcF,aAAzB;AAAA,GAAD,CAAjC;AACA,MAAMG,UAAU,GAAGd,WAAW,CAAC,UAACY,KAAD;AAAA,WAAWA,KAAK,CAACC,OAAN,CAAcC,UAAzB;AAAA,GAAD,CAA9B;AACA,MAAMC,UAAU,GAAGf,WAAW,CAAC,UAACY,KAAD;AAAA,WAAWA,KAAK,CAACI,MAAN,CAAaD,UAAxB;AAAA,GAAD,CAA9B;AACA,MAAME,WAAW,GAAGjB,WAAW,CAAC,UAACY,KAAD;AAAA,WAAWA,KAAK,CAACI,MAAN,CAAaC,WAAxB;AAAA,GAAD,CAA/B,CAN+C,CAO/C;;AAEA,MAAMC,gBAAgB,GAAG,SAAnBA,gBAAmB,GAAM;AAC7B;AACAR,IAAAA,QAAQ,CAACT,kBAAkB,EAAnB,CAAR,CAF6B,CAG7B;AACD,GAJD;;AAKAH,EAAAA,SAAS,CACP,YAAM;AACJY,IAAAA,QAAQ,CACNR,sBAAsB,CAAC;AACrBiB,MAAAA,EAAE,EAAE,IADiB;AAErBC,MAAAA,WAAW,EAAE,IAFQ;AAGrBC,MAAAA,kBAAkB,EAAE;AAHC,KAAD,CADhB,CAAR;AAOAX,IAAAA,QAAQ,CAACP,cAAc,CAAC,IAAD,CAAf,CAAR;AACAO,IAAAA,QAAQ,CAACN,cAAc,CAAC,IAAD,CAAf,CAAR;AACAc,IAAAA,gBAAgB;AACjB,GAZM,EAaP,CAACJ,UAAD,CAbO,CAAT;;AAgBA,MAAMQ,oBAAmB,GAAG,SAAtBA,mBAAsB,CAC1BC,WAD0B,EAE1BJ,EAF0B,EAG1BC,WAH0B,EAI1BC,kBAJ0B,EAKvB;AACH;AACAX,IAAAA,QAAQ,CAACR,sBAAsB,CAAC;AAAEiB,MAAAA,EAAE,EAAFA,EAAF;AAAMC,MAAAA,WAAW,EAAXA,WAAN;AAAmBC,MAAAA,kBAAkB,EAAlBA;AAAnB,KAAD,CAAvB,CAAR;AACAX,IAAAA,QAAQ,CAACL,gBAAgB,CAACU,UAAD,EAAaQ,WAAb,CAAjB,CAAR;AACD,GATD;;AAUA,SACE,oBAAC,QAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAEG,CAACN,WAAD,GACCN,aAAa,IACbA,aAAa,CAACa,GAAd,CAAkB,UAACC,YAAD;AAAA,WAChB,oBAAC,oBAAD;AACE,MAAA,mBAAmB,EAAE;AAAA,eACnBH,oBAAmB,CACjBG,YAAY,CAACF,WADI,EAEjBE,YAAY,CAACN,EAFI,EAGjBM,YAAY,CAACL,WAHI,EAIjBK,YAAY,CAACJ,kBAJI,CADA;AAAA;AADvB,OASMI,YATN;AAUE,MAAA,KAAK,iBAVP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OADgB;AAAA,GAAlB,CAFD,GAiBC,oBAAC,cAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAnBJ,CADF;AAwBD","sourcesContent":["import React, { Fragment, useEffect } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport {\r\n  fetchConversations,\r\n  setCurrentConversation,\r\n  setCurrentPost,\r\n  setCurrentType,\r\n} from \"../../redux/actions/profiles\";\r\nimport { getTwilioChannel } from \"../../redux/actions/twilio\";\r\nimport LoadingSpinner from \"../App/LoadingSpinner\";\r\nimport ConversationListItem from \"../ConversationListItem\";\r\n\r\nexport default function TabMessageContent(props) {\r\n  //   const conversations = useSelector((state) => state.conversations);\r\n  const dispatch = useDispatch();\r\n  const conversations = useSelector((state) => state.profile.conversations);\r\n  const currentTab = useSelector((state) => state.profile.currentTab);\r\n  const twilioUser = useSelector((state) => state.twilio.twilioUser);\r\n  const loadingUser = useSelector((state) => state.twilio.loadingUser);\r\n  //   const conversations = [{ name: \"text\" }];\r\n\r\n  const getConversations = () => {\r\n    // console.log(\"in function getconversations\");\r\n    dispatch(fetchConversations());\r\n    // setConversations([...conversations, ...newConversations]);\r\n  };\r\n  useEffect(\r\n    () => {\r\n      dispatch(\r\n        setCurrentConversation({\r\n          id: null,\r\n          displayName: null,\r\n          haveResponsePerson: false,\r\n        })\r\n      );\r\n      dispatch(setCurrentPost(null));\r\n      dispatch(setCurrentType(null));\r\n      getConversations();\r\n    },\r\n    [currentTab]\r\n  );\r\n\r\n  const handleClickListItem = (\r\n    channelName,\r\n    id,\r\n    displayName,\r\n    haveResponsePerson\r\n  ) => {\r\n    // console.log(channelName, id);\r\n    dispatch(setCurrentConversation({ id, displayName, haveResponsePerson }));\r\n    dispatch(getTwilioChannel(twilioUser, channelName));\r\n  };\r\n  return (\r\n    <Fragment>\r\n      {/* <ConversationSearch /> */}\r\n      {!loadingUser ? (\r\n        conversations &&\r\n        conversations.map((conversation) => (\r\n          <ConversationListItem\r\n            handleClickListItem={() =>\r\n              handleClickListItem(\r\n                conversation.channelName,\r\n                conversation.id,\r\n                conversation.displayName,\r\n                conversation.haveResponsePerson\r\n              )\r\n            }\r\n            {...conversation}\r\n            photo={`logo_user.jpg`}\r\n          />\r\n        ))\r\n      ) : (\r\n        <LoadingSpinner />\r\n      )}\r\n    </Fragment>\r\n  );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}