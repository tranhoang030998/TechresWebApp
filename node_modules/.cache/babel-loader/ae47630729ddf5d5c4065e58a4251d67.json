{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\");\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = void 0;\n\nvar _extends2 = _interopRequireDefault(require(\"@babel/runtime/helpers/extends\"));\n\nvar _defineProperty2 = _interopRequireDefault(require(\"@babel/runtime/helpers/defineProperty\"));\n\nvar React = _interopRequireWildcard(require(\"react\"));\n\nvar _rcNotification = _interopRequireDefault(require(\"rc-notification\"));\n\nvar _CloseOutlined = _interopRequireDefault(require(\"@ant-design/icons/CloseOutlined\"));\n\nvar _classnames = _interopRequireDefault(require(\"classnames\"));\n\nvar _CheckCircleOutlined = _interopRequireDefault(require(\"@ant-design/icons/CheckCircleOutlined\"));\n\nvar _CloseCircleOutlined = _interopRequireDefault(require(\"@ant-design/icons/CloseCircleOutlined\"));\n\nvar _ExclamationCircleOutlined = _interopRequireDefault(require(\"@ant-design/icons/ExclamationCircleOutlined\"));\n\nvar _InfoCircleOutlined = _interopRequireDefault(require(\"@ant-design/icons/InfoCircleOutlined\"));\n\nvar _useNotification = _interopRequireDefault(require(\"./hooks/useNotification\"));\n\nvar notificationInstance = {};\nvar defaultDuration = 4.5;\nvar defaultTop = 24;\nvar defaultBottom = 24;\nvar defaultPrefixCls = 'ant-notification';\nvar defaultPlacement = 'topRight';\nvar defaultGetContainer;\nvar defaultCloseIcon;\nvar rtl = false;\n\nfunction setNotificationConfig(options) {\n  var duration = options.duration,\n      placement = options.placement,\n      bottom = options.bottom,\n      top = options.top,\n      getContainer = options.getContainer,\n      closeIcon = options.closeIcon,\n      prefixCls = options.prefixCls;\n\n  if (prefixCls !== undefined) {\n    defaultPrefixCls = prefixCls;\n  }\n\n  if (duration !== undefined) {\n    defaultDuration = duration;\n  }\n\n  if (placement !== undefined) {\n    defaultPlacement = placement;\n  } else if (options.rtl) {\n    defaultPlacement = 'topLeft';\n  }\n\n  if (bottom !== undefined) {\n    defaultBottom = bottom;\n  }\n\n  if (top !== undefined) {\n    defaultTop = top;\n  }\n\n  if (getContainer !== undefined) {\n    defaultGetContainer = getContainer;\n  }\n\n  if (closeIcon !== undefined) {\n    defaultCloseIcon = closeIcon;\n  }\n\n  if (options.rtl !== undefined) {\n    rtl = options.rtl;\n  }\n}\n\nfunction getPlacementStyle(placement) {\n  var top = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : defaultTop;\n  var bottom = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : defaultBottom;\n  var style;\n\n  switch (placement) {\n    case 'topLeft':\n      style = {\n        left: 0,\n        top: top,\n        bottom: 'auto'\n      };\n      break;\n\n    case 'topRight':\n      style = {\n        right: 0,\n        top: top,\n        bottom: 'auto'\n      };\n      break;\n\n    case 'bottomLeft':\n      style = {\n        left: 0,\n        top: 'auto',\n        bottom: bottom\n      };\n      break;\n\n    default:\n      style = {\n        right: 0,\n        top: 'auto',\n        bottom: bottom\n      };\n      break;\n  }\n\n  return style;\n}\n\nfunction getNotificationInstance(args, callback) {\n  var _args$placement = args.placement,\n      placement = _args$placement === void 0 ? defaultPlacement : _args$placement,\n      top = args.top,\n      bottom = args.bottom,\n      _args$getContainer = args.getContainer,\n      getContainer = _args$getContainer === void 0 ? defaultGetContainer : _args$getContainer,\n      _args$closeIcon = args.closeIcon,\n      closeIcon = _args$closeIcon === void 0 ? defaultCloseIcon : _args$closeIcon;\n  var outerPrefixCls = args.prefixCls || defaultPrefixCls;\n  var prefixCls = \"\".concat(outerPrefixCls, \"-notice\");\n  var cacheKey = \"\".concat(outerPrefixCls, \"-\").concat(placement);\n  var cacheInstance = notificationInstance[cacheKey];\n\n  if (cacheInstance) {\n    Promise.resolve(cacheInstance).then(function (instance) {\n      callback({\n        prefixCls: prefixCls,\n        instance: instance\n      });\n    });\n    return;\n  }\n\n  var closeIconToRender =\n  /*#__PURE__*/\n  React.createElement(\"span\", {\n    className: \"\".concat(outerPrefixCls, \"-close-x\")\n  }, closeIcon ||\n  /*#__PURE__*/\n  React.createElement(_CloseOutlined[\"default\"], {\n    className: \"\".concat(outerPrefixCls, \"-close-icon\")\n  }));\n  var notificationClass = (0, _classnames[\"default\"])(\"\".concat(outerPrefixCls, \"-\").concat(placement), (0, _defineProperty2[\"default\"])({}, \"\".concat(outerPrefixCls, \"-rtl\"), rtl === true));\n  notificationInstance[cacheKey] = new Promise(function (resolve) {\n    _rcNotification[\"default\"].newInstance({\n      prefixCls: outerPrefixCls,\n      className: notificationClass,\n      style: getPlacementStyle(placement, top, bottom),\n      getContainer: getContainer,\n      closeIcon: closeIconToRender\n    }, function (notification) {\n      resolve(notification);\n      callback({\n        prefixCls: prefixCls,\n        instance: notification\n      });\n    });\n  });\n}\n\nvar typeToIcon = {\n  success: _CheckCircleOutlined[\"default\"],\n  info: _InfoCircleOutlined[\"default\"],\n  error: _CloseCircleOutlined[\"default\"],\n  warning: _ExclamationCircleOutlined[\"default\"]\n};\n\nfunction getRCNoticeProps(args, prefixCls) {\n  var duration = args.duration === undefined ? defaultDuration : args.duration;\n  var iconNode = null;\n\n  if (args.icon) {\n    iconNode =\n    /*#__PURE__*/\n    React.createElement(\"span\", {\n      className: \"\".concat(prefixCls, \"-icon\")\n    }, args.icon);\n  } else if (args.type) {\n    iconNode =\n    /*#__PURE__*/\n    React.createElement(typeToIcon[args.type] || null, {\n      className: \"\".concat(prefixCls, \"-icon \").concat(prefixCls, \"-icon-\").concat(args.type)\n    });\n  }\n\n  var autoMarginTag = !args.description && iconNode ?\n  /*#__PURE__*/\n  React.createElement(\"span\", {\n    className: \"\".concat(prefixCls, \"-message-single-line-auto-margin\")\n  }) : null;\n  return {\n    content:\n    /*#__PURE__*/\n    React.createElement(\"div\", {\n      className: iconNode ? \"\".concat(prefixCls, \"-with-icon\") : '',\n      role: \"alert\"\n    }, iconNode,\n    /*#__PURE__*/\n    React.createElement(\"div\", {\n      className: \"\".concat(prefixCls, \"-message\")\n    }, autoMarginTag, args.message),\n    /*#__PURE__*/\n    React.createElement(\"div\", {\n      className: \"\".concat(prefixCls, \"-description\")\n    }, args.description), args.btn ?\n    /*#__PURE__*/\n    React.createElement(\"span\", {\n      className: \"\".concat(prefixCls, \"-btn\")\n    }, args.btn) : null),\n    duration: duration,\n    closable: true,\n    onClose: args.onClose,\n    onClick: args.onClick,\n    key: args.key,\n    style: args.style || {},\n    className: args.className\n  };\n}\n\nfunction notice(args) {\n  getNotificationInstance(args, function (_ref) {\n    var prefixCls = _ref.prefixCls,\n        instance = _ref.instance;\n    instance.notice(getRCNoticeProps(args, prefixCls));\n  });\n}\n\nvar api = {\n  open: notice,\n  close: function close(key) {\n    Object.keys(notificationInstance).forEach(function (cacheKey) {\n      return Promise.resolve(notificationInstance[cacheKey]).then(function (instance) {\n        instance.removeNotice(key);\n      });\n    });\n  },\n  config: setNotificationConfig,\n  destroy: function destroy() {\n    Object.keys(notificationInstance).forEach(function (cacheKey) {\n      Promise.resolve(notificationInstance[cacheKey]).then(function (instance) {\n        instance.destroy();\n      });\n      delete notificationInstance[cacheKey]; // lgtm[js/missing-await]\n    });\n  }\n};\n['success', 'info', 'warning', 'error'].forEach(function (type) {\n  api[type] = function (args) {\n    return api.open((0, _extends2[\"default\"])((0, _extends2[\"default\"])({}, args), {\n      type: type\n    }));\n  };\n});\napi.warn = api.warning;\napi.useNotification = (0, _useNotification[\"default\"])(getNotificationInstance, getRCNoticeProps);\nvar _default = api;\nexports[\"default\"] = _default;","map":null,"metadata":{},"sourceType":"script"}