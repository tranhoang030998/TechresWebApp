{"ast":null,"code":"import _regeneratorRuntime from \"/Users/macbook/react-message-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/macbook/react-message-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _toConsumableArray from \"/Users/macbook/react-message-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _slicedToArray from \"/Users/macbook/react-message-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/macbook/react-message-app/src/components/MessageList/index.js\";\nimport { MessageOutlined, UserAddOutlined } from \"@ant-design/icons\";\nimport { Typography, Button } from \"antd\";\nimport Avatar from \"antd/lib/avatar/avatar\";\nimport moment from \"moment\";\nimport React, { useEffect, useRef, useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { fetchTwilioMessages, getTwilioChannel } from \"../../redux/actions/twilio\";\nimport Compose from \"../Compose\";\nimport Message from \"../Message\";\nimport Toolbar from \"../Toolbar\";\nimport ToolbarButton from \"../ToolbarButton\";\nimport \"./MessageList.css\";\nimport \"./MessageList.scss\";\nimport Axios from \"axios\";\nimport com from \"../../utils\";\nimport { SET_CURRENT_STATUS } from \"../../redux/actions/types\";\nimport LoadingSpinner from \"../App/LoadingSpinner\";\nvar Text = Typography.Text;\nexport default function MessageList(props) {\n  var _useState = useState([]),\n      _useState2 = _slicedToArray(_useState, 2),\n      messages = _useState2[0],\n      setMessages = _useState2[1];\n\n  var currentChannel = useSelector(function (state) {\n    return state.twilio.currentChannel;\n  });\n  var messagesTwilio = useSelector(function (state) {\n    return state.twilio.messages;\n  });\n  var currentConversation = useSelector(function (state) {\n    return state.profile.currentConversation;\n  }); // const MY_USER_ID = \"Hoàng Trần\";\n\n  var MY_USER_ID = useSelector(function (state) {\n    return state.profile.currentDisplayName;\n  });\n  var currentStatus = useSelector(function (state) {\n    return state.profile.currentStatus;\n  });\n  var messagesEnd = useRef(null);\n  var twilioUser = useSelector(function (state) {\n    return state.twilio.twilioUser;\n  });\n  var loadingMessages = useSelector(function (state) {\n    return state.twilio.loadingMessages;\n  }); // const currentChannel = useSelector((state) => state.twilio.currentChannel);\n  // const messages = useSelector((state) => state.twilio.messages);\n\n  var dispatch = useDispatch();\n  useEffect(function () {\n    dispatch(fetchTwilioMessages(currentChannel));\n    return function () {};\n  }, [twilioUser, currentChannel]);\n  useEffect(function () {\n    mapTwilioMessages(); // scrollToBottom();\n  }, [messagesTwilio]);\n  useEffect(function () {\n    console.log(messages);\n    scrollToBottom();\n  }, [messages.length]);\n  useEffect(function () {\n    console.log(\"use effect current channel on message added called\");\n\n    if (currentChannel) {\n      currentChannel.on(\"messageAdded\", function (message) {\n        console.log(messages);\n\n        var newMessages = _toConsumableArray(messages);\n\n        console.log(\"messaged added\", message);\n        setMessages(newMessages.concat({\n          id: message.index,\n          author: message.author,\n          message: message.body,\n          timestamp: message.timestamp\n        })); // scrollToBottom();\n      });\n    }\n\n    return function () {\n      console.log(\"clean up messaged added\");\n    };\n  }, [currentChannel, messages]);\n\n  var scrollToBottom = function scrollToBottom() {\n    console.log(\"Scroll to Bottom\");\n    messagesEnd.current.scrollIntoView({\n      behavior: \"smooth\",\n      block: \"nearest\",\n      inline: \"start\"\n    });\n  };\n\n  var mapTwilioMessages = function mapTwilioMessages() {\n    if (messagesTwilio && messagesTwilio.items) {\n      var mapedMessages = messagesTwilio.items.map(function (item) {\n        return {\n          id: item.index,\n          author: item.author,\n          message: item.body,\n          timestamp: item.timestamp\n        };\n      });\n      setMessages(mapedMessages);\n    }\n  };\n\n  var joinConversation =\n  /*#__PURE__*/\n  function () {\n    var _ref = _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee() {\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return Axios.post(\"\".concat(com.root, \"/api/v1/staff:joinConversation\"), {\n                staffId: localStorage.currentStaffId,\n                conversationId: currentConversation\n              });\n\n            case 2:\n              dispatch({\n                type: SET_CURRENT_STATUS,\n                payload: true\n              }); // dispatch(getTwilioChannel(twilioUser, `CHATBOX_${currentConversation}`));\n              // dispatch(fetchTwilioMessages(currentChannel));\n\n            case 3:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, this);\n    }));\n\n    return function joinConversation() {\n      return _ref.apply(this, arguments);\n    };\n  }();\n\n  var renderMessages = function renderMessages() {\n    var i = 0;\n    var messageCount = messages.length;\n    var tempMessages = [];\n\n    while (i < messageCount) {\n      var previous = messages[i - 1];\n      var current = messages[i];\n      var next = messages[i + 1];\n      var isMine = current.author === localStorage.userName;\n      var currentMoment = moment(current.timestamp);\n      var prevBySameAuthor = false;\n      var nextBySameAuthor = false;\n      var startsSequence = true;\n      var endsSequence = true;\n      var showTimestamp = true;\n\n      if (previous) {\n        var previousMoment = moment(previous.timestamp);\n        var previousDuration = moment.duration(currentMoment.diff(previousMoment));\n        prevBySameAuthor = previous.author === current.author;\n\n        if (prevBySameAuthor && previousDuration.as(\"hours\") < 1) {\n          startsSequence = false;\n        }\n\n        if (previousDuration.as(\"hours\") < 1) {\n          showTimestamp = false;\n        }\n      }\n\n      if (next) {\n        var nextMoment = moment(next.timestamp);\n        var nextDuration = moment.duration(nextMoment.diff(currentMoment));\n        nextBySameAuthor = next.author === current.author;\n\n        if (nextBySameAuthor && nextDuration.as(\"hours\") < 1) {\n          endsSequence = false;\n        }\n      }\n\n      tempMessages.push(React.createElement(Message, {\n        key: i,\n        isMine: isMine,\n        startsSequence: startsSequence,\n        endsSequence: endsSequence,\n        showTimestamp: showTimestamp,\n        data: current,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 170\n        },\n        __self: this\n      })); // Proceed to the next message.\n\n      i += 1;\n    }\n\n    return tempMessages;\n  };\n\n  return React.createElement(\"div\", {\n    className: \"message-list\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 188\n    },\n    __self: this\n  }, React.createElement(Toolbar, {\n    title: MY_USER_ID ? \"Conversation of \".concat(MY_USER_ID) : \"List Messages\",\n    leftItems: MY_USER_ID ? [// <ToolbarButton\n    //   key=\"info\"\n    //   icon=\"ion-ios-information-circle-outline\"\n    // />,\n    // <ToolbarButton key=\"video\" icon=\"ion-ios-videocam\" />,\n    // <ToolbarButton key=\"phone\" icon=\"ion-ios-call\" />\n    React.createElement(React.Fragment, null, React.createElement(Avatar, {\n      size: 36,\n      src: \"logo_user.jpg\",\n      className: \"cursor-pointer avatar-mr\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 201\n      },\n      __self: this\n    }), MY_USER_ID && React.createElement(Text, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 206\n      },\n      __self: this\n    }, MY_USER_ID)), React.createElement(MessageOutlined, {\n      className: \"cursor-pointer\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 208\n      },\n      __self: this\n    }), React.createElement(UserAddOutlined, {\n      className: \"cursor-pointer\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 209\n      },\n      __self: this\n    })] : [],\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 189\n    },\n    __self: this\n  }), !loadingMessages ? currentStatus && React.createElement(\"div\", {\n    className: \"message-list-container\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 217\n    },\n    __self: this\n  }, renderMessages()) : React.createElement(LoadingSpinner, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 220\n    },\n    __self: this\n  }), !currentStatus && React.createElement(\"div\", {\n    className: \"button-join-wrapper\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 223\n    },\n    __self: this\n  }, React.createElement(Typography, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 224\n    },\n    __self: this\n  }, \"You are not in the conversation, please join to see messages and chat with other people\"), MY_USER_ID && !currentStatus && React.createElement(Button, {\n    type: \"primary\",\n    onClick: joinConversation,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 230\n    },\n    __self: this\n  }, \"Join the conversation\")), React.createElement(Compose, {\n    rightItems: [React.createElement(ToolbarButton, {\n      key: \"photo\",\n      icon: \"ion-ios-camera\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 238\n      },\n      __self: this\n    }), React.createElement(ToolbarButton, {\n      key: \"image\",\n      icon: \"ion-ios-image\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 239\n      },\n      __self: this\n    }), React.createElement(ToolbarButton, {\n      key: \"audio\",\n      icon: \"ion-ios-mic\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 240\n      },\n      __self: this\n    }), React.createElement(ToolbarButton, {\n      key: \"money\",\n      icon: \"ion-ios-card\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 241\n      },\n      __self: this\n    }), React.createElement(ToolbarButton, {\n      key: \"games\",\n      icon: \"ion-logo-game-controller-b\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 242\n      },\n      __self: this\n    }), React.createElement(ToolbarButton, {\n      key: \"emoji\",\n      icon: \"ion-ios-happy\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 243\n      },\n      __self: this\n    })],\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 236\n    },\n    __self: this\n  }), React.createElement(\"div\", {\n    style: {\n      float: \"left\",\n      clear: \"both\",\n      position: \"relative\",\n      top: \"5px\",\n      visibility: \"hidden\"\n    } // ref={(el) => {\n    //   messagesEnd = el;\n    // }}\n    ,\n    ref: messagesEnd,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 246\n    },\n    __self: this\n  }, \"ok\"));\n}","map":{"version":3,"sources":["/Users/macbook/react-message-app/src/components/MessageList/index.js"],"names":["MessageOutlined","UserAddOutlined","Typography","Button","Avatar","moment","React","useEffect","useRef","useState","useDispatch","useSelector","fetchTwilioMessages","getTwilioChannel","Compose","Message","Toolbar","ToolbarButton","Axios","com","SET_CURRENT_STATUS","LoadingSpinner","Text","MessageList","props","messages","setMessages","currentChannel","state","twilio","messagesTwilio","currentConversation","profile","MY_USER_ID","currentDisplayName","currentStatus","messagesEnd","twilioUser","loadingMessages","dispatch","mapTwilioMessages","console","log","scrollToBottom","length","on","message","newMessages","concat","id","index","author","body","timestamp","current","scrollIntoView","behavior","block","inline","items","mapedMessages","map","item","joinConversation","post","root","staffId","localStorage","currentStaffId","conversationId","type","payload","renderMessages","i","messageCount","tempMessages","previous","next","isMine","userName","currentMoment","prevBySameAuthor","nextBySameAuthor","startsSequence","endsSequence","showTimestamp","previousMoment","previousDuration","duration","diff","as","nextMoment","nextDuration","push","float","clear","position","top","visibility"],"mappings":"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","sourcesContent":["import { MessageOutlined, UserAddOutlined } from \"@ant-design/icons\";\r\nimport { Typography, Button } from \"antd\";\r\nimport Avatar from \"antd/lib/avatar/avatar\";\r\nimport moment from \"moment\";\r\nimport React, { useEffect, useRef, useState } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport {\r\n  fetchTwilioMessages,\r\n  getTwilioChannel,\r\n} from \"../../redux/actions/twilio\";\r\nimport Compose from \"../Compose\";\r\nimport Message from \"../Message\";\r\nimport Toolbar from \"../Toolbar\";\r\nimport ToolbarButton from \"../ToolbarButton\";\r\nimport \"./MessageList.css\";\r\nimport \"./MessageList.scss\";\r\nimport Axios from \"axios\";\r\nimport com from \"../../utils\";\r\nimport { SET_CURRENT_STATUS } from \"../../redux/actions/types\";\r\nimport LoadingSpinner from \"../App/LoadingSpinner\";\r\n\r\nconst { Text } = Typography;\r\nexport default function MessageList(props) {\r\n  const [messages, setMessages] = useState([]);\r\n  const currentChannel = useSelector((state) => state.twilio.currentChannel);\r\n  const messagesTwilio = useSelector((state) => state.twilio.messages);\r\n  const currentConversation = useSelector(\r\n    (state) => state.profile.currentConversation\r\n  );\r\n  // const MY_USER_ID = \"Hoàng Trần\";\r\n  const MY_USER_ID = useSelector((state) => state.profile.currentDisplayName);\r\n  const currentStatus = useSelector((state) => state.profile.currentStatus);\r\n  const messagesEnd = useRef(null);\r\n\r\n  const twilioUser = useSelector((state) => state.twilio.twilioUser);\r\n  const loadingMessages = useSelector((state) => state.twilio.loadingMessages);\r\n  // const currentChannel = useSelector((state) => state.twilio.currentChannel);\r\n  // const messages = useSelector((state) => state.twilio.messages);\r\n  const dispatch = useDispatch();\r\n  useEffect(\r\n    () => {\r\n      dispatch(fetchTwilioMessages(currentChannel));\r\n      return () => {};\r\n    },\r\n    [twilioUser, currentChannel]\r\n  );\r\n\r\n  useEffect(\r\n    () => {\r\n      mapTwilioMessages();\r\n      // scrollToBottom();\r\n    },\r\n    [messagesTwilio]\r\n  );\r\n\r\n  useEffect(\r\n    () => {\r\n      console.log(messages);\r\n      scrollToBottom();\r\n    },\r\n    [messages.length]\r\n  );\r\n  useEffect(\r\n    () => {\r\n      console.log(\"use effect current channel on message added called\");\r\n      if (currentChannel) {\r\n        currentChannel.on(\"messageAdded\", function(message) {\r\n          console.log(messages);\r\n          const newMessages = [...messages];\r\n          console.log(\"messaged added\", message);\r\n          setMessages(\r\n            newMessages.concat({\r\n              id: message.index,\r\n              author: message.author,\r\n              message: message.body,\r\n              timestamp: message.timestamp,\r\n            })\r\n          );\r\n          // scrollToBottom();\r\n        });\r\n      }\r\n\r\n      return () => {\r\n        console.log(\"clean up messaged added\");\r\n      };\r\n    },\r\n    [currentChannel, messages]\r\n  );\r\n\r\n  const scrollToBottom = () => {\r\n    console.log(\"Scroll to Bottom\");\r\n    messagesEnd.current.scrollIntoView({\r\n      behavior: \"smooth\",\r\n      block: \"nearest\",\r\n      inline: \"start\",\r\n    });\r\n  };\r\n\r\n  const mapTwilioMessages = () => {\r\n    if (messagesTwilio && messagesTwilio.items) {\r\n      const mapedMessages = messagesTwilio.items.map((item) => ({\r\n        id: item.index,\r\n        author: item.author,\r\n        message: item.body,\r\n        timestamp: item.timestamp,\r\n      }));\r\n      setMessages(mapedMessages);\r\n    }\r\n  };\r\n\r\n  const joinConversation = async () => {\r\n    await Axios.post(`${com.root}/api/v1/staff:joinConversation`, {\r\n      staffId: localStorage.currentStaffId,\r\n      conversationId: currentConversation,\r\n    });\r\n\r\n    dispatch({\r\n      type: SET_CURRENT_STATUS,\r\n      payload: true,\r\n    });\r\n\r\n    // dispatch(getTwilioChannel(twilioUser, `CHATBOX_${currentConversation}`));\r\n    // dispatch(fetchTwilioMessages(currentChannel));\r\n  };\r\n\r\n  const renderMessages = () => {\r\n    let i = 0;\r\n    let messageCount = messages.length;\r\n    let tempMessages = [];\r\n\r\n    while (i < messageCount) {\r\n      let previous = messages[i - 1];\r\n      let current = messages[i];\r\n      let next = messages[i + 1];\r\n      let isMine = current.author === localStorage.userName;\r\n      let currentMoment = moment(current.timestamp);\r\n      let prevBySameAuthor = false;\r\n      let nextBySameAuthor = false;\r\n      let startsSequence = true;\r\n      let endsSequence = true;\r\n      let showTimestamp = true;\r\n\r\n      if (previous) {\r\n        let previousMoment = moment(previous.timestamp);\r\n        let previousDuration = moment.duration(\r\n          currentMoment.diff(previousMoment)\r\n        );\r\n        prevBySameAuthor = previous.author === current.author;\r\n\r\n        if (prevBySameAuthor && previousDuration.as(\"hours\") < 1) {\r\n          startsSequence = false;\r\n        }\r\n\r\n        if (previousDuration.as(\"hours\") < 1) {\r\n          showTimestamp = false;\r\n        }\r\n      }\r\n\r\n      if (next) {\r\n        let nextMoment = moment(next.timestamp);\r\n        let nextDuration = moment.duration(nextMoment.diff(currentMoment));\r\n        nextBySameAuthor = next.author === current.author;\r\n\r\n        if (nextBySameAuthor && nextDuration.as(\"hours\") < 1) {\r\n          endsSequence = false;\r\n        }\r\n      }\r\n\r\n      tempMessages.push(\r\n        <Message\r\n          key={i}\r\n          isMine={isMine}\r\n          startsSequence={startsSequence}\r\n          endsSequence={endsSequence}\r\n          showTimestamp={showTimestamp}\r\n          data={current}\r\n        />\r\n      );\r\n\r\n      // Proceed to the next message.\r\n      i += 1;\r\n    }\r\n\r\n    return tempMessages;\r\n  };\r\n\r\n  return (\r\n    <div className=\"message-list\">\r\n      <Toolbar\r\n        title={MY_USER_ID ? `Conversation of ${MY_USER_ID}` : \"List Messages\"}\r\n        leftItems={\r\n          MY_USER_ID\r\n            ? [\r\n                // <ToolbarButton\r\n                //   key=\"info\"\r\n                //   icon=\"ion-ios-information-circle-outline\"\r\n                // />,\r\n                // <ToolbarButton key=\"video\" icon=\"ion-ios-videocam\" />,\r\n                // <ToolbarButton key=\"phone\" icon=\"ion-ios-call\" />\r\n                <>\r\n                  <Avatar\r\n                    size={36}\r\n                    src=\"logo_user.jpg\"\r\n                    className=\"cursor-pointer avatar-mr\"\r\n                  />\r\n                  {MY_USER_ID && <Text>{MY_USER_ID}</Text>}\r\n                </>,\r\n                <MessageOutlined className=\"cursor-pointer\" />,\r\n                <UserAddOutlined className=\"cursor-pointer\" />,\r\n              ]\r\n            : []\r\n        }\r\n      />\r\n\r\n      {!loadingMessages ? (\r\n        currentStatus && (\r\n          <div className=\"message-list-container\">{renderMessages()}</div>\r\n        )\r\n      ) : (\r\n        <LoadingSpinner />\r\n      )}\r\n      {!currentStatus && (\r\n        <div className=\"button-join-wrapper\">\r\n          <Typography>\r\n            You are not in the conversation, please join to see messages and\r\n            chat with other people\r\n          </Typography>\r\n\r\n          {MY_USER_ID && !currentStatus && (\r\n            <Button type=\"primary\" onClick={joinConversation}>\r\n              Join the conversation\r\n            </Button>\r\n          )}\r\n        </div>\r\n      )}\r\n      <Compose\r\n        rightItems={[\r\n          <ToolbarButton key=\"photo\" icon=\"ion-ios-camera\" />,\r\n          <ToolbarButton key=\"image\" icon=\"ion-ios-image\" />,\r\n          <ToolbarButton key=\"audio\" icon=\"ion-ios-mic\" />,\r\n          <ToolbarButton key=\"money\" icon=\"ion-ios-card\" />,\r\n          <ToolbarButton key=\"games\" icon=\"ion-logo-game-controller-b\" />,\r\n          <ToolbarButton key=\"emoji\" icon=\"ion-ios-happy\" />,\r\n        ]}\r\n      />\r\n      <div\r\n        style={{\r\n          float: \"left\",\r\n          clear: \"both\",\r\n          position: \"relative\",\r\n          top: \"5px\",\r\n          visibility: \"hidden\",\r\n        }}\r\n        // ref={(el) => {\r\n        //   messagesEnd = el;\r\n        // }}\r\n        ref={messagesEnd}\r\n      >\r\n        ok\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}