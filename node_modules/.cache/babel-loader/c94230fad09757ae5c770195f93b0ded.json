{"ast":null,"code":"import _regeneratorRuntime from \"/Users/macbook/react-message-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/macbook/react-message-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { FETCH_CONVERSATION, FETCH_CONVERSATION_ERROR, SET_CURRENT_CONVERSATION, FETCH_POST_FANPAGE_ERROR, SET_CURRENT_TAB, SET_CURRENT_POST, FETCH_COMMENT_BYPOST, FETCH_COMMENT_BYPOST_ERROR, SET_CURRENT_TYPE, FETCH_POST_FANPAGE_START, FETCH_POST_FANPAGE_SUCCESS } from \"./types\";\nimport com from \"../../utils\";\nimport Axios from \"axios\";\nexport var fetchConversations = function fetchConversations() {\n  return (\n    /*#__PURE__*/\n    function () {\n      var _ref = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee(dispatch) {\n        var res, newConversations;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.prev = 0;\n                _context.next = 3;\n                return Axios.get(\"\".concat(com.root, \"/api/v1/conversation:fetchAll\"));\n\n              case 3:\n                res = _context.sent;\n                // console.log(res);\n                newConversations = res.data.data.map(function (item) {\n                  return {\n                    id: item.id,\n                    name: \"\".concat(item.nameConversation),\n                    channelName: \"CHATBOX_\".concat(item.id),\n                    data: \"\".concat(item.nameConversation),\n                    clientId: item.id,\n                    userId: item.client.user.id,\n                    displayName: item.client.user.displayName,\n                    haveResponsePerson: item.haveResponsePerson\n                  };\n                });\n                dispatch({\n                  type: FETCH_CONVERSATION,\n                  payload: newConversations\n                });\n                _context.next = 11;\n                break;\n\n              case 8:\n                _context.prev = 8;\n                _context.t0 = _context[\"catch\"](0);\n                dispatch({\n                  type: FETCH_CONVERSATION_ERROR,\n                  payload: _context.t0\n                });\n\n              case 11:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this, [[0, 8]]);\n      }));\n\n      return function (_x) {\n        return _ref.apply(this, arguments);\n      };\n    }()\n  );\n};\nexport var setCurrentConversation = function setCurrentConversation(payload) {\n  return function (dispatch) {\n    dispatch({\n      type: SET_CURRENT_CONVERSATION,\n      payload: payload\n    });\n  };\n};\nexport var fetchPostFanpage = function fetchPostFanpage() {\n  return (\n    /*#__PURE__*/\n    function () {\n      var _ref2 = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee2(dispatch) {\n        var res;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                //   console.log(\"fetch conversation actions\");\n                dispatch({\n                  type: FETCH_POST_FANPAGE_START\n                });\n                _context2.prev = 1;\n                _context2.next = 4;\n                return Axios.get(\"\".concat(com.root, \"/api/v1/fetchAllPostInFanPage\"));\n\n              case 4:\n                res = _context2.sent;\n                // console.log(res);\n                dispatch({\n                  type: FETCH_POST_FANPAGE_SUCCESS,\n                  payload: res.data.data.feed.data.filter(function (post) {\n                    return post.full_picture && post.message || post.story;\n                  }).map(function (post) {\n                    return {\n                      id: post.id,\n                      name: post.message || post.story,\n                      full_picture: post.full_picture,\n                      created_time: post.created_time\n                    };\n                  })\n                });\n                _context2.next = 11;\n                break;\n\n              case 8:\n                _context2.prev = 8;\n                _context2.t0 = _context2[\"catch\"](1);\n                dispatch({\n                  type: FETCH_POST_FANPAGE_ERROR,\n                  payload: _context2.t0\n                });\n\n              case 11:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this, [[1, 8]]);\n      }));\n\n      return function (_x2) {\n        return _ref2.apply(this, arguments);\n      };\n    }()\n  );\n};\nexport var setCurrentTab = function setCurrentTab(id) {\n  return function (dispatch) {\n    dispatch({\n      type: SET_CURRENT_TAB,\n      payload: id\n    });\n  };\n};\nexport var setCurrentPost = function setCurrentPost(post) {\n  return function (dispatch) {\n    dispatch({\n      type: SET_CURRENT_POST,\n      payload: post\n    });\n  };\n};\nexport var setCurrentType = function setCurrentType(value) {\n  return function (dispatch) {\n    dispatch({\n      type: SET_CURRENT_TYPE,\n      payload: value\n    });\n  };\n};\nexport var fetchCommentByPost = function fetchCommentByPost(id) {\n  return (\n    /*#__PURE__*/\n    function () {\n      var _ref3 = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee3(dispatch) {\n        var res;\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                _context3.prev = 0;\n                _context3.next = 3;\n                return Axios.get(\"\".concat(com.root, \"/api/v1/fetchAllCommentByPost/\").concat(id));\n\n              case 3:\n                res = _context3.sent;\n                // console.log(res);\n                dispatch({\n                  type: FETCH_COMMENT_BYPOST,\n                  payload: res.data.comment.data\n                });\n                _context3.next = 10;\n                break;\n\n              case 7:\n                _context3.prev = 7;\n                _context3.t0 = _context3[\"catch\"](0);\n                dispatch({\n                  type: FETCH_COMMENT_BYPOST_ERROR,\n                  payload: _context3.t0\n                });\n\n              case 10:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this, [[0, 7]]);\n      }));\n\n      return function (_x3) {\n        return _ref3.apply(this, arguments);\n      };\n    }()\n  );\n};","map":{"version":3,"sources":["/Users/macbook/react-message-app/src/redux/actions/profiles.js"],"names":["FETCH_CONVERSATION","FETCH_CONVERSATION_ERROR","SET_CURRENT_CONVERSATION","FETCH_POST_FANPAGE_ERROR","SET_CURRENT_TAB","SET_CURRENT_POST","FETCH_COMMENT_BYPOST","FETCH_COMMENT_BYPOST_ERROR","SET_CURRENT_TYPE","FETCH_POST_FANPAGE_START","FETCH_POST_FANPAGE_SUCCESS","com","Axios","fetchConversations","dispatch","get","root","res","newConversations","data","map","item","id","name","nameConversation","channelName","clientId","userId","client","user","displayName","haveResponsePerson","type","payload","setCurrentConversation","fetchPostFanpage","feed","filter","post","full_picture","message","story","created_time","setCurrentTab","setCurrentPost","setCurrentType","value","fetchCommentByPost","comment"],"mappings":"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","sourcesContent":["import {\r\n  FETCH_CONVERSATION,\r\n  FETCH_CONVERSATION_ERROR,\r\n  SET_CURRENT_CONVERSATION,\r\n  FETCH_POST_FANPAGE_ERROR,\r\n  SET_CURRENT_TAB,\r\n  SET_CURRENT_POST,\r\n  FETCH_COMMENT_BYPOST,\r\n  FETCH_COMMENT_BYPOST_ERROR,\r\n  SET_CURRENT_TYPE,\r\n  FETCH_POST_FANPAGE_START,\r\n  FETCH_POST_FANPAGE_SUCCESS,\r\n} from \"./types\";\r\nimport com from \"../../utils\";\r\nimport Axios from \"axios\";\r\n\r\nexport const fetchConversations = () => async (dispatch) => {\r\n  //   console.log(\"fetch conversation actions\");\r\n  try {\r\n    const res = await Axios.get(`${com.root}/api/v1/conversation:fetchAll`);\r\n    // console.log(res);\r\n    let newConversations = res.data.data.map((item) => {\r\n      return {\r\n        id: item.id,\r\n        name: `${item.nameConversation}`,\r\n        channelName: `CHATBOX_${item.id}`,\r\n        data: `${item.nameConversation}`,\r\n        clientId: item.id,\r\n        userId: item.client.user.id,\r\n        displayName: item.client.user.displayName,\r\n        haveResponsePerson: item.haveResponsePerson,\r\n      };\r\n    });\r\n    dispatch({\r\n      type: FETCH_CONVERSATION,\r\n      payload: newConversations,\r\n    });\r\n  } catch (err) {\r\n    dispatch({\r\n      type: FETCH_CONVERSATION_ERROR,\r\n      payload: err,\r\n    });\r\n  }\r\n};\r\n\r\nexport const setCurrentConversation = (payload) => (dispatch) => {\r\n  dispatch({\r\n    type: SET_CURRENT_CONVERSATION,\r\n    payload: payload,\r\n  });\r\n};\r\n\r\nexport const fetchPostFanpage = () => async (dispatch) => {\r\n  //   console.log(\"fetch conversation actions\");\r\n  dispatch({\r\n    type: FETCH_POST_FANPAGE_START,\r\n  });\r\n  try {\r\n    const res = await Axios.get(`${com.root}/api/v1/fetchAllPostInFanPage`);\r\n    // console.log(res);\r\n    dispatch({\r\n      type: FETCH_POST_FANPAGE_SUCCESS,\r\n      payload: res.data.data.feed.data\r\n        .filter((post) => (post.full_picture && post.message) || post.story)\r\n        .map((post) => ({\r\n          id: post.id,\r\n          name: post.message || post.story,\r\n          full_picture: post.full_picture,\r\n          created_time: post.created_time,\r\n        })),\r\n    });\r\n  } catch (err) {\r\n    dispatch({\r\n      type: FETCH_POST_FANPAGE_ERROR,\r\n      payload: err,\r\n    });\r\n  }\r\n};\r\n\r\nexport const setCurrentTab = (id) => (dispatch) => {\r\n  dispatch({\r\n    type: SET_CURRENT_TAB,\r\n    payload: id,\r\n  });\r\n};\r\n\r\nexport const setCurrentPost = (post) => (dispatch) => {\r\n  dispatch({\r\n    type: SET_CURRENT_POST,\r\n    payload: post,\r\n  });\r\n};\r\n\r\nexport const setCurrentType = (value) => (dispatch) => {\r\n  dispatch({\r\n    type: SET_CURRENT_TYPE,\r\n    payload: value,\r\n  });\r\n};\r\n\r\nexport const fetchCommentByPost = (id) => async (dispatch) => {\r\n  //   console.log(\"fetch conversation actions\");\r\n  try {\r\n    const res = await Axios.get(\r\n      `${com.root}/api/v1/fetchAllCommentByPost/${id}`\r\n    );\r\n    // console.log(res);\r\n    dispatch({\r\n      type: FETCH_COMMENT_BYPOST,\r\n      payload: res.data.comment.data,\r\n    });\r\n  } catch (err) {\r\n    dispatch({\r\n      type: FETCH_COMMENT_BYPOST_ERROR,\r\n      payload: err,\r\n    });\r\n  }\r\n};\r\n"]},"metadata":{},"sourceType":"module"}